name: Ubuntu Compatibility Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  ubuntu-test:
    runs-on: ${{ matrix.ubuntu-version }}
    strategy:
      matrix:
        ubuntu-version: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Python 3.8 requires special setup on newer Ubuntu
          - ubuntu-version: ubuntu-22.04
            python-version: "3.8"
          - ubuntu-version: ubuntu-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: System Information
      run: |
        echo "üñ•Ô∏è System Information:"
        echo "Ubuntu Version: $(lsb_release -d)"
        echo "Python Version: $(python --version)"
        echo "GCC Version: $(gcc --version | head -1)"
        echo "Architecture: $(uname -m)"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcjson-dev \
          build-essential \
          pkg-config \
          python3-dev \
          python3-pip
        
        # Verify installations
        echo "üì¶ Dependency Check:"
        pkg-config --exists libcjson && echo "‚úÖ libcjson found: $(pkg-config --modversion libcjson)" || echo "‚ùå libcjson not found"
        gcc --version | head -1
        python3-config --includes || echo "‚ö†Ô∏è python3-dev might be missing"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel pkgconfig build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Test package configuration
      run: |
        python scripts/test_config.py
    
    - name: Build package (wheel)
      run: |
        python -m build --wheel || echo "Wheel build failed - trying setup.py"
    
    - name: Build C extensions
      run: |
        python setup.py build_ext --inplace || echo "C extensions build failed - continuing with Python-only mode"
    
    - name: Test package import
      run: |
        PYTHONPATH=src python -c "
        import sys
        print(f'üêç Python: {sys.version}')
        try:
            import fast_fhir
            print('‚úÖ Package imported successfully')
            print(f'üì¶ Version: {fast_fhir.__version__}')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            sys.exit(1)
        "
    
    - name: Test C extensions
      run: |
        PYTHONPATH=src python -c "
        extensions = [
            'fast_fhir.fhir_parser_c',
            'fast_fhir.fhir_datatypes_c',
            'fast_fhir.fhir_foundation_c'
        ]
        
        loaded = 0
        for ext in extensions:
            try:
                __import__(ext)
                print(f'‚úÖ {ext} loaded')
                loaded += 1
            except ImportError:
                print(f'‚ö†Ô∏è {ext} not available')
            except Exception as e:
                print(f'‚ùå {ext} error: {e}')
        
        print(f'üìä C Extensions: {loaded}/{len(extensions)} loaded')
        if loaded == 0:
            print('‚ÑπÔ∏è Running in Python-only mode (this is OK)')
        "
    
    - name: Run comprehensive tests
      run: |
        python scripts/test_c_build.py