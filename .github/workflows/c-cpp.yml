name: C Extensions Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Python 3.8 not available on ubuntu-22.04 and ubuntu-latest by default
          - os: ubuntu-22.04
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y libcjson-dev build-essential pkg-config
        # Verify cJSON installation
        pkg-config --exists libcjson && echo "✅ cJSON found" || echo "⚠️ cJSON not found"
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cjson
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "setuptools>=61.0" wheel pkgconfig
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Build C extensions
      run: |
        python setup.py build_ext --inplace || echo "C extensions build failed - continuing with Python-only mode"
    
    - name: Test package import
      run: |
        PYTHONPATH=src python -c "
        try:
            import fast_fhir
            print('✅ Package imported successfully')
            print(f'Version: {fast_fhir.__version__}')
        except Exception as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "
    
    - name: Test C extensions (if available)
      run: |
        PYTHONPATH=src python -c "
        try:
            import fast_fhir.fhir_parser_c
            print('✅ C extensions loaded successfully')
        except ImportError:
            print('⚠️ C extensions not available (fallback mode)')
        except Exception as e:
            print(f'❌ C extension error: {e}')
        "
